import "global-jsdom/register";
import test, { TestContext } from "node:test";
import { expect } from "expect";
import { FontMapping } from "../src/FontMapping";
import { symbolFontMap } from "../src/SymbolFontMap";

/**
 * A list of characters which are used as test inputs and the matching expectation.
 * First entry in the array is the expected result if using the second entry like it is in symbol font.
 */
const mappedCharacterToLowCharCode: string[][] = [
  ["!", "!"],
  // ["∀", '"'],
  // ["#", "#"],
  // ["∃", "$"],
  // ["%", "%"],
  // ["&", "&"],
  // ["∍", "'"],
  // ["(", "("],
  // [")", ")"],
  // ["*", "*"],
  // ["+", "+"],
  // [",", ","],
  // ["−", "-"],
  // [".", "."],
  // ["−", "-"],
  // ["/", "/"],
  // ["0", "0"],
  // ["1", "1"],
  // ["2", "2"],
  // ["3", "3"],
  // ["3", "3"],
  // ["4", "4"],
  // ["5", "5"],
  // ["6", "6"],
  // ["7", "7"],
  // ["8", "8"],
  // ["9", "9"],
  // [":", ":"],
  // [";", ";"],
  // ["<", "<"],
  // ["=", "="],
  // [">", ">"],
  // ["?", "?"],
  // ["≅", "@"],
  // ["Α", "A"],
  // ["Β", "B"],
  // ["Χ", "C"],
  // ["Δ", "D"],
  // ["Ε", "E"],
  // ["Φ", "F"],
  // ["Γ", "G"],
  // ["Η", "H"],
  // ["Ι", "I"],
  // ["ϑ", "J"],
  // ["Κ", "K"],
  // ["Λ", "L"],
  // ["Μ", "M"],
  // ["Ν", "N"],
  // ["Ο", "O"],
  // ["Π", "P"],
  // ["Θ", "Q"],
  // ["Ρ", "R"],
  // ["Σ", "S"],
  // ["Τ", "T"],
  // ["Υ", "U"],
  // ["ς", "V"],
  // ["Ω", "W"],
  // ["Ξ", "X"],
  // ["Ψ", "Y"],
  // ["Ζ", "Z"],
  // ["[", "["],
  // ["∴", "\\"],
  // ["]", "]"],
  // ["⊥", "^"],
  // ["_", "_"],
  // ["", "`"],
  // ["α", "a"],
  // ["β", "b"],
  // ["χ", "c"],
  // ["δ", "d"],
  // ["ε", "e"],
  // ["φ", "f"],
  // ["γ", "g"],
  // ["η", "h"],
  // ["ι", "i"],
  // ["ϕ", "j"],
  // ["κ", "k"],
  // ["λ", "l"],
  // ["μ", "m"],
  // ["ν", "n"],
  // ["ο", "o"],
  // ["π", "p"],
  // ["θ", "q"],
  // ["ρ", "r"],
  // ["σ", "s"],
  // ["τ", "t"],
  // ["υ", "u"],
  // ["ϖ", "v"],
  // ["ω", "w"],
  // ["ξ", "x"],
  // ["ψ", "y"],
  // ["ζ", "z"],
  // ["{", "{"],
  // ["|", "|"],
  // ["}", "}"],
  // ["~", "~"],
  // ["", ""],
  // //["€", " "], See manual test-sheet
  // ["ϒ", "¡"],
  // ["′", "¢"],
  // ["≤", "£"],
  // ["⁄", "¤"],
  // ["∞", "¥"],
  // ["ƒ", "¦"],
  // ["♣", "§"],
  // ["♦", "¨"],
  // ["♥", "©"],
  // ["♠", "ª"],
  // ["↔", "«"],
  // ["←", "¬"],
  // ["↑", "­"],
  // ["→", "®"],
  // ["↓", "¯"],
  // ["°", "°"],
  // ["±", "±"],
  // ["″", "²"],
  // ["≥", "³"],
  // ["×", "´"],
  // ["∝", "µ"],
  // ["∂", "¶"],
  // ["•", "·"],
  // ["÷", "¸"],
  // ["≠", "¹"],
  // ["≡", "º"],
  // ["≈", "»"],
  // ["…", "¼"],
  // ["⏐", "½"],
  // ["⎯", "¾"],
  // ["↲", "¿"],
  // ["ℵ", "À"],
  // ["ℑ", "Á"],
  // ["ℜ", "Â"],
  // ["℘", "Ã"],
  // ["⊗", "Ä"],
  // ["⊕", "Å"],
  // ["∅", "Æ"],
  // ["∩", "Ç"],
  // ["∪", "È"],
  // ["⊃", "É"],
  // ["⊇", "Ê"],
  // ["⊄", "Ë"],
  // ["⊂", "Ì"],
  // ["⊆", "Í"],
  // ["∈", "Î"],
  // ["∉", "Ï"],
  // ["∠", "Ð"],
  // ["∇", "Ñ"],
  // ["®", "Ò"],
  // ["©", "Ó"],
  // ["™", "Ô"],
  // ["∏", "Õ"],
  // ["√", "Ö"],
  // ["⋅", "×"],
  // ["¬", "Ø"],
  // ["∧", "Ù"],
  // ["∨", "Ú"],
  // ["⇔", "Û"],
  // ["⇐", "Ü"],
  // ["⇑", "Ý"],
  // ["⇒", "Þ"],
  // ["⇓", "ß"],
  // ["◊", "à"],
  // ["〈", "á"],
  // ["®", "â"],
  // ["™", "ä"],
  // ["∑", "å"],
  // ["⎛", "æ"],
  // ["⎜", "ç"],
  // ["⎝", "è"],
  // ["⎡", "é"],
  // ["⎢", "ê"],
  // ["⎣", "ë"],
  // ["⎧", "ì"],
  // ["⎨", "í"],
  // ["⎩", "î"],
  // ["⎪", "ï"],
  // ["ð", "ð"],
  // ["〉", "ñ"],
  // ["∫", "ò"],
  // ["⌠", "ó"],
  // ["⎮", "ô"],
  // ["⌡", "õ"],
  // ["⎞", "ö"],
  // ["⎟", "÷"],
  // ["⎠", "ø"],
  // ["⎤", "ù"],
  // ["⎥", "ú"],
  // ["⎦", "û"],
  // ["⎫", "ü"],
  // ["⎬", "ý"],
  // ["⎭", "þ"],
  // ["ÿ", "ÿ"],
];

void test("Special characters are mapped correctly", async (t: TestContext) => {
  const fontMapping = new FontMapping(symbolFontMap);
  for (const [input, expected] of mappedCharacterToLowCharCode) {
    await t.test(`Should replace character '${input}' with '${expected}'.`, () => {
      const escapedHtml = fontMapping.toReplacementCharacter(input);
      expect(escapedHtml.charCodeAt(0)).toBe(expected.charCodeAt(0));
      expect(escapedHtml).toBe(expected);
    });
  }
});
