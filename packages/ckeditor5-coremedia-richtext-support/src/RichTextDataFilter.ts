import { Plugin } from "@ckeditor/ckeditor5-core";
import Logger from "@coremedia/ckeditor5-logging/logging/Logger";
import LoggerProvider from "@coremedia/ckeditor5-logging/logging/LoggerProvider";
import { DataFilter } from "@ckeditor/ckeditor5-html-support";
import ReducedMatcherPattern, {
  InheritingMatcherPattern,
  resolveInheritance,
  toLookupStrategy,
} from "./ReducedMatcherPattern";
import { COREMEDIA_RICHTEXT_1_0_CONFIG } from "./CoreMediaRichText10Dtd";
import { getConfig } from "./CoreMediaRichTextSupportConfig";
import { reportInitEnd, reportInitStart } from "@coremedia/ckeditor5-core-common/Plugins";

/**
 * Plugin, which configures CKEditor's General HTML Support, so that
 * CoreMedia RichText 1.0 elements and attributes as generated by
 * `RichTextDataProcessor` are supported, no matter, what additional
 * plugins are added to CKEditor. Thus, even if CKEditor is not enabled to
 * support `<strong>`, the configuration applied here, that `<strong>`
 * elements are not removed when loaded from server.
 *
 * In addition to the CoreMedia RichText 1.0 DTD, the default configuration
 * also adds _alias_ elements, such as `<h1>` to `<h6>`, which are also a
 * result of the default data-processing.
 */
class RichTextDataFilter extends Plugin {
  public static readonly pluginName = "GeneralRichTextDataFilter" as const;
  static readonly #logger: Logger = LoggerProvider.getLogger(RichTextDataFilter.pluginName);

  static readonly requires = [DataFilter];

  #delegate?: DataFilter;
  #config: ReducedMatcherPattern[] = [];

  init(): Promise<void> | void {
    const logger = RichTextDataFilter.#logger;

    const initInformation = reportInitStart(this);

    const editor = this.editor;
    this.#delegate = editor.plugins.get(DataFilter);

    this.#loadAllowedConfig(COREMEDIA_RICHTEXT_1_0_CONFIG);

    // Add alias elements from default data-processing.
    this.loadAliases([
      // thead|tfoot: Introduced by data-processing for `<tr>` elements
      // having a dedicated class.
      // In data-processing from data `<thead>` and `<tfoot>` will get the
      // same attributes as the `<tbody>` they originate from. Thus, inheriting
      // from `tbody` here.
      {
        name: /^(thead|tfoot)$/,
        inherit: "tbody",
      },
      {
        name: /^(h[1-6])$/,
        inherit: "p",
      },
      // i: While `<i>` is not part of CoreMedia RichText DTD, it is required here
      // because CKEditor uses `<i>` instead of `<em>` in data view.
      // See https://github.com/ckeditor/ckeditor5/issues/1394
      {
        name: "i",
        inherit: "em",
      },
      // u, del, s, strike: These are part of the HTML representation after
      // data-processing `<span>` with a dedicated class. Thus, they must be
      // handled in the same way as `<span>`.
      {
        name: /^(u|del|s|strike)$/,
        inherit: "span",
      },
      // code: Part of HTML representation of data-processed `<span>` with
      // dedicated class.
      {
        name: "code",
        inherit: "span",
      },
      // th: Part of HTML representation of data-processed `<th>` with
      // dedicated class.
      {
        name: "th",
        inherit: "td",
      },
    ]);

    const config = getConfig(editor.config);
    // Doing this as an extra step, allows using previously introduced aliases
    // (see above) as reference. Thus, you may also define an alias for
    // `<h1>` now.
    this.loadAliases(config.aliases ?? []);

    if (logger.isDebugEnabled()) {
      logger.debug("Declared elements and attributes to GHS.", { config: { ...this.#config } });
    }

    reportInitEnd(initInformation);
  }

  /**
   * Forwards loading the configuration to General HTML Support and tracks
   * added patterns in `#config`.
   *
   * @param config - additional patterns to load
   */
  #loadAllowedConfig(config: ReducedMatcherPattern[]): void {
    this.#config.push(...config);
    //@ts-expect-errors since 37.0.0 Expects a type of MatcherPattern. First convert to a MatcherPattern?
    this.#delegate?.loadAllowedConfig(config);
  }

  /**
   * Adds the given inheriting patterns to the filter configuration.
   * Patterns added this way, are available as an inheritance pattern
   * afterward.
   *
   * For convenience, also normal patterns not being an alias/not inheriting
   * another pattern, can be added this way.
   *
   * @param config - inheritance configuration to load
   */
  loadAliases(config: InheritingMatcherPattern[]): void {
    const lookup = toLookupStrategy(...this.#config);
    const patterns = config.map((pattern) => resolveInheritance(pattern, lookup));
    this.#loadAllowedConfig(patterns);
  }
}

export default RichTextDataFilter;
