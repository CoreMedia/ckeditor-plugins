import { ExampleData } from "../ExampleData";
import { code, em, h1, h2, p, richtext, sectionHeading, strong } from "../RichText";

const normalizationIntroduction = `\
${h1(`Data Normalization`)}\
${p(`\
This is one of the examples, which demonstrates the so-called \
${em(`Data Normalization`)}. While you may find the two related \
examples providing the same view in CKEditor, their original data are \
different. To handle this, is part of the data normalization. Find more \
details in the description provided at the end of this example.\
`)}\
${h2(`Examples`)}\
`;

const normalizationDescription = `\
${h2(`Description`)}\
${p(`\
Data received from CoreMedia Studio Server may provide a different structure \
than that generated by CKEditor, although they are semantically equivalent. \
This applies to attributes sorted in different order or even attribute values \
like for ${code(`class`)}. Structural differences in general trigger a \
so-called ${em(`auto-checkout`)} to the currently edited content item, \
which again blocks other editors from editing the same content item.\
`)}\
${p(`\
Data Normalization prevents this, by checking for \
${strong(`semantic equivalence`)}. This is one of two example data, \
which are semantically equivalent. When loading any of the examples, you will \
notice in console log, that the subsequently triggered \
${em(`autosave`)} will not consider any of the saved data to be \
different to the originally set data â€“ although at least one of them will be \
different due to CKEditor's processing between models and view. \
`)}\
${p(`\
To dive into normalization process, you may want to enable debug logging \
within the example application and search for ${code(`DataNormalizer`)}
in debug output.\
`)}\
`;

interface NormalizationExample {
  title: string;
  original: string;
  equivalent: string;
}

const examples: NormalizationExample[] = [];

examples.push({
  title: `Ignorable Whitespace`,
  original: p(`Lorem ipsum dolor sit amet.`),
  equivalent: `\n \t${p(`Lorem\n \tipsum\n \tdolor\n \tsit\n \tamet.`)}\n \t`,
});

examples.push({
  title: `Ignorable Class-Attribute-Value Order`,
  original: p(`Lorem ipsum.`, { class: `alpha beta` }),
  equivalent: p(`Lorem ipsum.`, { class: `beta alpha` }),
});

examples.push({
  title: `Ignorable Class-Attribute-Value Spacing`,
  original: p(`Lorem ipsum.`, { class: `alpha beta` }),
  equivalent: p(`Lorem ipsum.`, { class: `alpha  beta` }),
});

// TODO: xml:lang/lang equivalence

examples.push({
  title: `Ignorable Attribute Order`,
  original: `<p class="some-class" dir="rtl">Lorem ipsum!</p>`,
  equivalent: `<p dir="rtl" class="some-class">Lorem ipsum!</p>`,
});

const original = examples.map((example) => `${sectionHeading(example.title)}${example.original}`).join("");
const equivalent = examples.map((example) => `${sectionHeading(example.title)}${example.equivalent}`).join("");

// noinspection JSUnusedGlobalSymbols: Used in Example Application
export const normalizationData: ExampleData = {
  "Data Normalization 1: Original": richtext(`${normalizationIntroduction}${original}${normalizationDescription}`),
  "Data Normalization 2: Equivalent": richtext(`${normalizationIntroduction}${equivalent}${normalizationDescription}`),
};
