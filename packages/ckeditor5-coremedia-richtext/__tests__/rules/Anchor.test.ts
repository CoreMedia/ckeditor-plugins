// noinspection HttpUrlsUsage
import { allDataProcessingTests, DataProcessingTestCase, Direction } from "../DataDrivenTests";

const ns_richtext = "http://www.coremedia.com/2003/richtext-1.0";
const ns_xlink = "http://www.w3.org/1999/xlink";
const text = "TEXT";
const attr_link_external = "https://example.org/";
/**
 * Folders are represented by uneven IDs.
 * This format is as it is generated by the REST API of CoreMedia Studio,
 * while a normal content ID would look like `coremedia:///cap/content/41`.
 */
const attr_link_content_folder_data = "content/41";
/**
 * Folders are represented by uneven IDs.
 * This format is the representation in model using colons rather than
 * slashed, so that CKEditor's link feature will detect them as being
 * links and does not try adding any custom schema like https to these values.
 */
const attr_link_content_folder_model = "content:41";
/**
 * Documents are represented by even IDs.
 * This format is as it is generated by the REST API of CoreMedia Studio,
 * while a normal content ID would look like `coremedia:///cap/content/42`.
 */
const attr_link_content_document_data = "content/42";
/**
 * Documents are represented by even IDs.
 * This format is the representation in model using colons rather than
 * slashed, so that CKEditor's link feature will detect them as being
 * links and does not try adding any custom schema like https to these values.
 */
const attr_link_content_document_model = "content:42";

// noinspection XmlUnusedNamespaceDeclaration
const wrapAnchor = (img: string): string => `<div xmlns="${ns_richtext}" xmlns:xlink="${ns_xlink}"><p>${img}</p></div>`;

describe("CoreMediaRichTextConfig: Anchors", () => {
  // noinspection HtmlUnknownAttribute
  const data: DataProcessingTestCase[] = [
    {
      name: "ANCHOR#1: Should ignore invalid show-attribute.",
      direction: Direction.toDataView,
      data: wrapAnchor(`<a xlink:href="${attr_link_external}" xlink:show="unknown">${text}</a>`),
      dataView: wrapAnchor(`<a href="${attr_link_external}">${text}</a>`),
    },
    {
      name: "ANCHOR#2: Should ignore invalid show-attribute and only keep role attribute.",
      direction: Direction.toDataView,
      data: wrapAnchor(`<a xlink:href="${attr_link_external}" xlink:show="unknown" xlink:role="some_role">${text}</a>`),
      dataView: wrapAnchor(`<a href="${attr_link_external}" target="_role_some_role">${text}</a>`),
    },
    {
      name: "ANCHOR#3: Should remove anchors without required href.",
      direction: Direction.toData,
      data: `<div xmlns="${ns_richtext}"><p>${text}</p></div>`,
      dataView: `<div xmlns="${ns_richtext}"><p><a class="some">${text}</a></p></div>`,
    },
  ];

  allDataProcessingTests(data);
});
