name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type. Allowed values: "major", "minor", "patch", "prerelease"'
        required: true
        default: 'patch'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: github.actor != 'coremedia-ci' && github.actor != 'github-action[bot]'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      #Make sure the release type is one of the allowed inputs.
      - name: Workflow Dispatch release type check
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/feature-prerelease-publish' && !(github.event.inputs.release_type == 'major' || github.event.inputs.release_type == 'minor' || github.event.inputs.release_type == 'patch' || github.event.inputs.release_type == 'prerelease')
        run: |
          echo "Expected a release type due to the manual build execution on main branch."
          echo "Allowed release types are: major, minor, patch, prerelease"
          exit 1
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Configure NPM
        run: |
          npm install -g pnpm@6.14.6
          npm config set @coremedia:registry=https://npm.coremedia.io
          echo '//npm.coremedia.io/:_authToken=${NPM_AUTH_TOKEN}' > .npmrc
      - name: Setup Git
        run: |
          git config --global user.name 'coremedia-ci'
          git config --global user.email 'coremedia-ci@coremedia.com'
      # FOR PR ONLY!
      #
      # For pull requests we use special prerelease version to prevent accidents while publishing them into local repository.
      # Format: MAJOR.MINOR.PATCH.pr{PR_NUMBER}-{PR_RUN_NUMBER}.{RUN_NUMBER}
      - name: Set Version for PR
        if: github.event_name == 'pull_request'
        run: pnpm -r run updateversion -- prerelease --preid=pr${{ github.event.number }}-${{ github.run_number }} --no-git-tag-version
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      # ON MAIN BY MANUAL TRIGGER ONLY!
      # Set the release version to actual MAJOR.MINOR.PATCH version.
      # If a prerelease is triggered manually, we keep the prerelease version for this workflow.
      - name: Create Release Version
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/feature-prerelease-publish' && github.event.inputs.release_type != 'prerelease'
        run: |
          git stash
          pnpm -r run updateversion -- ${{ github.event.inputs.release_type }} --no-git-tag-version
          release_version=$(cat package.json | jq -r .version)
          git commit -am "Set release version ${release_version}"
          git push
          git stash apply
      #Provide the actual version for later checks.
      #Access: steps.read-version.outputs.version
      - name: Read Version
        id: read-version
        run: |
          release_version=$(cat package.json | jq -r .version)
          echo "::set-output name=version::${release_version}"
      #Require a prerelease version on main branch when not explicitly releasing.
      #Guard to not accidentially release.
      - name: Require Prerelease Version
        if: github.event_name == 'push' && github.ref == 'refs/heads/feature-prerelease-publish' && !contains(steps.read-version.outputs.version, '-')
        run: |
          echo "Expected prerelease version on main"
          exit 1
      - name: Install
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: pnpm install
      - name: Build
        run: |
          pnpm build
      - name: Lint
        run: pnpm lint
      - name: Test
        run: pnpm jest
      - name: Install for Production
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: pnpm install --production
      - name: Publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: |
          pnpm publish --no-git-checks
      # MAIN ONLY
      # Set next prerelease version to prepare for next build.
      # This ensures that we do not build one release number twice (for not getting conflicts in our repository)
      - name: Create Next Prerelease Version
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        if: github.ref == 'refs/heads/feature-prerelease-publish' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        # Make sure to not commit anything which has been changed in one of the previous steps.
        # Update the version, afterwards commit and push.
        run: |
          git reset --hard
          pnpm -r run updateversion -- prerelease --preid=rc --no-git-tag-version
          next_prerelease_version=$(cat package.json | jq -r .version)
          git commit -am "Set next prerelease version ${next_prerelease_version}"
          git push
